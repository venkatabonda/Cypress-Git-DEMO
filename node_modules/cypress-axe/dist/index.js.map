{"version":3,"sources":["index.js"],"names":["fs","require","axe","injectAxe","cy","window","log","then","eval","configureAxe","configurationOptions","win","configure","checkA11y","context","options","violationCallback","skipFailures","isEmptyObjectorNull","undefined","includedImpacts","axeOptions","run","document","violations","Array","isArray","Boolean","length","filter","v","includes","impact","wrap","each","selectors","nodes","reduce","acc","node","concat","target","join","Cypress","$el","$","name","consoleProps","message","id","assert","equal","value","Object","entries","constructor","Commands","add"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const fs = require('fs')\n\nconst axe = fs.readFileSync('node_modules/axe-core/axe.min.js', 'utf8')\n\nexport const injectAxe = () => {\n  cy.window({ log: false }).then(window => {\n    window.eval(axe)\n  })\n}\n\nexport const configureAxe = (configurationOptions = {}) => {\n  cy.window({ log: false }).then(win => {\n    return win.axe.configure(configurationOptions)\n  })\n}\n\nconst checkA11y = (\n  context,\n  options,\n  violationCallback,\n  skipFailures = false\n) => {\n  cy.window({ log: false })\n    .then(win => {\n      if (isEmptyObjectorNull(context)) context = undefined\n      if (isEmptyObjectorNull(options)) options = undefined\n      if (isEmptyObjectorNull(violationCallback)) violationCallback = undefined\n      const { includedImpacts, ...axeOptions } = options || {}\n      return win.axe\n        .run(context || win.document, axeOptions)\n        .then(({ violations }) => {\n          return includedImpacts &&\n            Array.isArray(includedImpacts) &&\n            Boolean(includedImpacts.length)\n            ? violations.filter(v => includedImpacts.includes(v.impact))\n            : violations\n        })\n    })\n    .then(violations => {\n      if (violations.length) {\n        if (violationCallback) {\n          violationCallback(violations)\n        }\n        cy.wrap(violations, { log: false }).each(v => {\n          const selectors = v.nodes\n            .reduce((acc, node) => acc.concat(node.target), [])\n            .join(', ')\n\n          Cypress.log({\n            $el: Cypress.$(selectors),\n            name: 'a11y error!',\n            consoleProps: () => v,\n            message: `${v.id} on ${v.nodes.length} Node${\n              v.nodes.length === 1 ? '' : 's'\n            }`\n          })\n        })\n      }\n\n      return cy.wrap(violations, { log: false })\n    })\n    .then(violations => {\n      if (!skipFailures) {\n        assert.equal(\n          violations.length,\n          0,\n          `${violations.length} accessibility violation${\n            violations.length === 1 ? '' : 's'\n          } ${violations.length === 1 ? 'was' : 'were'} detected`\n        )\n      } else {\n        if (violations.length) {\n          Cypress.log({\n            name: 'a11y violation summary',\n            message: `${violations.length} accessibility violation${\n              violations.length === 1 ? '' : 's'\n            } ${violations.length === 1 ? 'was' : 'were'} detected`\n          })\n        }\n      }\n    })\n}\n\nCypress.Commands.add('injectAxe', injectAxe)\n\nCypress.Commands.add('configureAxe', configureAxe)\n\nCypress.Commands.add('checkA11y', checkA11y)\n\nfunction isEmptyObjectorNull(value) {\n  if (value == null) return true\n  return Object.entries(value).length === 0 && value.constructor === Object\n}\n"]}